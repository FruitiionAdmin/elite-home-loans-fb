import Head from 'next/head'
import Image from 'next/image'
import {useRouter} from 'next/router';
import styles from '../../styles/Home.module.css'
import { useState, useEffect } from 'react'
import ProcessingCover from '../../components/ProcessingCover';
import AppContainer from '../../components/AppContainer';
import FilterButton from '../../components/FilterButton';
import SortButton from '../../components/SortButton';
import OfferingsTable from '../../components/OfferingsTable';
import { currentDomain } from '../../const';
import FlowLoader from '../../components/FlowLoader';
import convertDollarStringToInt from '../../functions/convertDollarStringToInt';
import Footer from '../../components/FruitiionFooter';
import isScreenMobile from '../../functions/isScreenMobile';

export default function Offerings() {
  const router = useRouter()

  const [userType, setUserType] = useState('guest')
  const [offerings, setOfferings] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [sort, setSort] = useState("Sort")

  const initialize = async () => {
    setIsLoading(true)
    const getOfferingsResponse = await fetch(`${currentDomain}/api/initializeOfferings`)
    const initializeData = await getOfferingsResponse.json()
    
    if (initializeData.offerings) {
      setOfferings(initializeData.offerings)
    }
    
    setUserType(initializeData.userType)
    setIsLoading(false)
  }

  let filterTimeOut;
  const search = (term) => {
    clearTimeout(filterTimeOut)

    filterTimeOut = setTimeout( async () => {
      const offeringsSearchResponse = await fetch(`${currentDomain}/api/searchOfferings`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          search: term,
        })
      })
      const offeringsSearchData = await offeringsSearchResponse.json()
      if (offeringsSearchData.deals) {
        setOfferings(offeringsSearchData.deals);
      }
    }, 750)
  }

  const sortOfferings = (sort) => {
    
    let sortObj;

    switch (sort) {
      case "↓ Minimum Investment":
        sortObj = {"key": "minInvestment", "order": "ascending"}
        break
      case "↑ Minimum Investment":
        sortObj = {"key": "minInvestment", "order": "descending"}
        break
      case "↓ Maximum Investment":
        sortObj = {"key": "maxInvestment", "order": "ascending"}
        break
      case "↑ Maximum Investment":
        sortObj = {"key": "maxInvestment", "order": "descending"}
        break
      case "↓ Total Raise":
        sortObj = {"key": "totalRaise", "order": "ascending"}
        break
      case "↑ Total Raise":
        sortObj = {"key": "totalRaise", "order": "descending"}
        break
      case "↓ Purchase Price":
        sortObj = {"key": "purchasePrice", "order": "ascending"}
        break
      case "↑ Purchase Price":
        sortObj = {"key": "purchasePrice", "order": "descending"}
        break
    }

    let {key, order, display} = sortObj
    const sortOrder = order === "descending" ? -1 : 1
    let sortedDeals =  offerings.sort((a,b) => {
      const valueA = convertDollarStringToInt(a[key]);
      const valueB = convertDollarStringToInt(b[key]);

  
      if (valueA < valueB) {
        return -1 * sortOrder
      }
      if (valueA > valueB) {
        return 1 * sortOrder
      }
      return a.totalRaise - b.totalRaise;
    })
    setSort(sort)
    setOfferings(sortedDeals)
  }

  useEffect(() => {
    const handleResize = () => {
      if (isScreenMobile(window)) {
        router.push('/mobileMessage')
      }
    }
    window.addEventListener("resize", handleResize)
    handleResize()
    initialize()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Fruitiion</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fruitiionIcon.svg" />
      </Head>
      <AppContainer
        userType={userType}
        activeSection='offerings'
        secondRowContnet={
            <>
            <div className={styles.secondRowInputContainer}>
                <div className={styles.secondRowSearchContainer}>
                    <Image className={styles.searchIcon} alt='search Icon' src='/searchIcon.svg' height={35} width={35} />
                    <input className={styles.secondRowSearch} placeholder='Search' onChange={(event) => search(event.target.value)}/>
                </div>
            </div>
            <div className={styles.secondRowComponentsContainer}>
                <select value={sort} className={styles.offeringsDropDown} onChange={(event)=> sortOfferings(event.target.value)}>
                    <option disabled value='Sort'>Sort</option>
                    <option value='↓ Minimum Investment'>↓ Minimum Investment</option>
                    <option value='↑ Minimum Investment'>↑ Minimum Investment</option>
                    <option value='↓ Maximum Investment'>↓ Maximum Investment</option>
                    <option value='↑ Maximum Investment'>↑ Maximum Investment</option>
                    <option value='↓ Total Raise'>↓ Total Raise</option>
                    <option value='↑ Total Raise'>↑ Total Raise</option>
                    <option value='↓ Purchase Price'>↓ Purchase Price</option>
                    <option value='↑ Purchase Price'>↑ Purchase Price</option>
                </select>
            </div>
            </>
        }
        appContent={
            <>
            <OfferingsTable items={offerings}/>
            </>
        }
      />
      
   
      {
        isLoading ?
        <FlowLoader />:
        null
      }
      <Footer />
    </div>
  )
}
