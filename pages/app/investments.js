import Head from 'next/head'
import Image from 'next/image'
import {useRouter} from 'next/router';
import styles from '../../styles/Home.module.css'
import { useState, useEffect, use } from 'react'
import AppContainer from '../../components/AppContainer';
import InvestmentsTable from '../../components/InvestmentsTable';
import { currentDomain } from '../../const';
import FlowLoader from '../../components/FlowLoader';
import convertDollarStringToInt from '../../functions/convertDollarStringToInt';
import Footer from '../../components/FruitiionFooter';
import isScreenMobile from '../../functions/isScreenMobile';

export default function Investments() {
  const router = useRouter()

  const [isLoading, setIsLoading] = useState(false)
  const [userType, setUserType] = useState('investor')
  const [investments, setInvestments] = useState([])
  const [sort, setSort] = useState("Sort")

  const initializeInvestments = async () => {
    setIsLoading(true)
    const initializeInvestmentsResponse = await fetch(`${currentDomain}/api/initializeInvestments`)
    const initializeInvestmentsData = await initializeInvestmentsResponse.json()
    if (initializeInvestmentsData.result == "success") {
      setInvestments(initializeInvestmentsData.investments)
    } else {
      console.log(initializeInvestmentsData)
    }
    setIsLoading(false)
  }

  const sortInvestments = (sort) => {
    
    let sortObj;

    switch (sort) {
      case "↓ Investment Amount":
        sortObj = {"key": "investmentAmount", "order": "ascending"}
        break
      case "↑ Investment Amount":
        sortObj = {"key": "investmentAmount", "order": "descending"}
        break
      case "Status":
        sortObj = {"key": "status", "order": "ascending"}
        break
    }

    let {key, order, display} = sortObj
    const sortOrder = order === "descending" ? -1 : 1
    let sortedDeals =  investments.sort((a,b) => {
      const valueA = key != "status" ? convertDollarStringToInt(a[key]) : a[key];
      const valueB = key != "status" ? convertDollarStringToInt(b[key]) : b[key];

  
      if (valueA < valueB) {
        return -1 * sortOrder
      }
      if (valueA > valueB) {
        return 1 * sortOrder
      }
      return a.totalRaise - b.totalRaise;
    })
    setSort(sort)
    setInvestments(sortedDeals)
  }

  useEffect(() => {
    const handleResize = () => {
      if (isScreenMobile(window)) {
        router.push('/mobileMessage')
      }
    }
    window.addEventListener("resize", handleResize)
    handleResize()
    initializeInvestments()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Fruitiion</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fruitiionIcon.svg" />
      </Head>
      <AppContainer
        userType='investor'
        activeSection='investments'
        secondRowContnet={
            <>
            <div className={styles.secondRowInputContainer}>
               
            </div>
            <div className={styles.secondRowComponentsContainer}>
                <select value={sort} className={styles.offeringsDropDown} onChange={(event)=> sortInvestments(event.target.value)}>
                    <option disabled value='Sort'>Sort</option>
                    <option value='↓ Investment Amount'>↓ Investment Amount</option>
                    <option value='↑ Investment Amount'>↑ Investment Amount</option>
                    <option value='Status'>Status</option>
                </select>
            </div>
            </>
        }
        appContent={
            <>
            <InvestmentsTable investments={investments} />
            </>
        }
      />
      {
        isLoading ?
        <FlowLoader />:
        null
      }
    <Footer />
    </div>
  )
}
