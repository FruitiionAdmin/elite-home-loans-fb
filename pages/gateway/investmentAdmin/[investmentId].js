import Head from 'next/head'
import Image from 'next/image'
import {useRouter} from 'next/router';
import styles from '../../../styles/Home.module.css'
import LoginInput from '../../../components/LoginInput'
import { useState, useEffect } from 'react'
import FlowLoader from '../../../components/FlowLoader';
import { currentDomain } from '../../../const';
import Footer from '../../../components/FruitiionFooter';
import isScreenMobile from '../../../functions/isScreenMobile';

export default function Home() {
  const router = useRouter()

  const { investmentId } = router.query

  const [showPassword,setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [userType, setUserType] = useState("sponsor")
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [errorMessage, setErrorMessage] = useState("")

  const login = async () => {
    setIsLoading(true)
    const loginResponse = await fetch(`${currentDomain}/api/investorLogin`, {
      method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email,
          password: password
        })
    })
    const loginData = await loginResponse.json()
    if (loginData.result == "success") {
      router.push(`/app/investmentAdmin/${investmentId}`)
    } else {
      setErrorMessage(loginData.result)
    }
    setIsLoading(false)
  }




  const forgotPassword = async () => {
    setIsLoading(true)
    if (email ==  "") {
      setErrorMessage("Please provide your email.")
      return
    }
    setErrorMessage("If your account exist, an email with password reset instructions will be sent shortly")
    const forgotPasswordResponse = await fetch(`${currentDomain}/api/forgotPassword`, {
      method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email,
          userType: userType
        })
    })
    const forgotPasswordData = await forgotPasswordResponse.json()
    console.log(forgotPasswordData)
    setIsLoading(false)
  }

  const initializeGatewayInvestmentAdmin = async () => {
    setIsLoading(true)
    const initializeGatewayInvestmentAdminResponse = await fetch(`${currentDomain}/api/initializeGatewayInvestmentAdmin`, {
      method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          investmentId: investmentId
        })
    })
    const initializeGatewayInvestmentAdminData = await initializeGatewayInvestmentAdminResponse.json()
    if (initializeGatewayInvestmentAdminData.result == "success") {
      router.push(`/app/investmentAdmin/${investmentId}`)
    }
    setIsLoading(false)
  }

  useEffect(() => {
    const handleResize = () => {
      if (isScreenMobile(window)) {
        router.push('/mobileMessage')
      }
    }
    window.addEventListener("resize", handleResize)
    handleResize()
    if (investmentId) {
      (async () => {
        initializeGatewayInvestmentAdmin(investmentId)
      })()
    }
  }, [investmentId])

  return (
    <div className={styles.container}>
      <Head>
        <title>Fruitiion</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fruitiionIcon.svg" />
      </Head>
      <div className={styles.loginContainer}>
        <div className={styles.loginComponentsContainer}>
          <Image alt='Fruitiion login logo' className={styles.loginLogo} src='/fruitiionBannerLogoWhite.png' width={303} height={106} priority/>
          <LoginInput value={email} onChange={(event) => {setEmail(event.target.value), setErrorMessage("")}} autocomplete='current-email' placeholder='Email' leadingIcon='/userIcon.svg' showPassword={true}/>
          <LoginInput value={password} onChange={(event) => {setPassword(event.target.value), setErrorMessage("")}} autocomplete='current-passowrd' placeholder='Password' leadingIcon='/lockIcon.svg' trailingIcon={showPassword ? '/slashEyeIcon.png' : '/eyeIcon.png'} togglePwVis={() => setShowPassword(!showPassword)} showPassword={showPassword}/>
          <a className={styles.errorMessage}>{errorMessage}</a>
          <a className={styles.forgotPasswordLink} onClick={() => forgotPassword()}>Forgot your password?</a>
          <div className={styles.loginButtonContainer}>
            <button type='submit' value="LOGIN" className={styles.sponsorLoginButton} onClick={() => login()}>Investor Login</button>
          </div>
         
        </div>
      </div>
      {
        isLoading ?
        <FlowLoader />:
        null
      }
      <Footer />
    </div>
  )
}
