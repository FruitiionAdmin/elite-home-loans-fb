import Head from 'next/head'
import Image from 'next/image'
import {useRouter} from 'next/router';
import styles from '../../styles/Home.module.css'
import LoginInput from '../../components/LoginInput'
import { useState, useEffect } from 'react'
import FlowLoader from '../../components/FlowLoader';
import { currentDomain } from '../../const';
import Footer from '../../components/FruitiionFooter';
import isScreenMobile from '../../functions/isScreenMobile';

export default function Home() {
  const router = useRouter()

  const { collection } = router.query

  const [showPassword,setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [code,setCode] = useState("")
  const [errorMessage, setErrorMessage] = useState("")

  const reset = async () => {
    if (email == "") {
      setErrorMessage("Please provide an email")
      return
    }
    if (password == "") {
      setErrorMessage("Please provide a new password")
      return
    }
    if (password.length < 6) {
      setErrorMessage("Passwords must be at least 6 characters")
      return
    }
    if (password != confirmPassword) {
      setErrorMessage("Passwords must match")
      return
    }
    if (code == "") {
      setErrorMessage("Please provide a verification code")
      return
    }
    const resetResponse = await fetch(`${currentDomain}/api/resetPassword`, {
      method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email,
          password: password,
          code: code,
          collection: collection
        })
    })

    const resetData = await resetResponse.json()
    
    if (resetData.invalid) {
      setErrorMessage("Invalid information provided")
      return
    }

    router.push('/')
  }

 

  useEffect(() => {
    const handleResize = () => {
      if (isScreenMobile(window)) {
        router.push('/mobileMessage')
      }
    }
    window.addEventListener("resize", handleResize)
    handleResize()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Fruitiion</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fruitiionIcon.svg" />
      </Head>
      <div className={styles.loginContainer}>
        <div className={styles.loginComponentsContainer}>
          <Image alt='Fruitiion login logo' className={styles.loginLogo} src='/fruitiionBannerLogoWhite.png' width={303} height={106} priority/>
          <LoginInput value={email} onChange={(event) => {setEmail(event.target.value), setErrorMessage("")}} autocomplete='current-email' placeholder='Email' leadingIcon='/userIcon.svg' showPassword={true}/>
          <LoginInput value={password} onChange={(event) => {setPassword(event.target.value), setErrorMessage("")}} autocomplete='current-passowrd' placeholder='New Password' leadingIcon='/lockIcon.svg' trailingIcon={showPassword ? '/slashEyeIcon.png' : '/eyeIcon.png'} togglePwVis={() => setShowPassword(!showPassword)} showPassword={showPassword}/>
          <LoginInput value={confirmPassword} onChange={(event) => {setConfirmPassword(event.target.value), setErrorMessage("")}} autocomplete='current-passowrd' placeholder='Confirm Password' leadingIcon='/lockIcon.svg' trailingIcon={showPassword ? '/slashEyeIcon.png' : '/eyeIcon.png'} togglePwVis={() => setShowPassword(!showPassword)} showPassword={showPassword}/>
          <LoginInput value={code} onChange={(event) => {setCode(event.target.value), setErrorMessage("")}} autocomplete='current-email' placeholder='Code' leadingIcon='/unselectedIcon.svg' showPassword={true}/>
          <a className={styles.errorMessage}>{errorMessage}</a>
          <div className={styles.loginButtonContainer}>
            <button type='submit' value="LOGIN" className={styles.sponsorLoginButton} onClick={() => reset()}>Reset</button>
          </div>
        </div>
      </div>
      {
        isLoading ?
        <FlowLoader />:
        null
      }
      <Footer />
    </div>
  )
}
